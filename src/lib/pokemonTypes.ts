export type PokemonType = typeof POKEMON_TYPES[number];

export const POKEMON_TYPES = [
  "normal",
  "fire",
  "water",
  "electric",
  "grass",
  "ice",
  "fighting",
  "poison",
  "ground",
  "flying",
  "psychic",
  "bug",
  "rock",
  "ghost",
  "dragon",
  "dark",
  "steel",
  "fairy",
] as const;

export interface CustomType {
  name: string;
  weaknesses: PokemonType[];
  resistances: PokemonType[];
  immunities: PokemonType[];
}

const TYPE_CHART: Record<PokemonType, Record<PokemonType, number>> = {
  normal: {
    normal: 1,
    fire: 1,
    water: 1,
    electric: 1,
    grass: 1,
    ice: 1,
    fighting: 2,
    poison: 1,
    ground: 1,
    flying: 1,
    psychic: 1,
    bug: 1,
    rock: 1,
    ghost: 0,
    dragon: 1,
    dark: 1,
    steel: 1,
    fairy: 1,
  },
  fire: {
    normal: 1,
    fire: 0.5,
    water: 2,
    electric: 1,
    grass: 0.5,
    ice: 0.5,
    fighting: 1,
    poison: 1,
    ground: 2,
    flying: 1,
    psychic: 1,
    bug: 0.5,
    rock: 2,
    ghost: 1,
    dragon: 1,
    dark: 1,
    steel: 0.5,
    fairy: 0.5,
  },
  water: {
    normal: 1,
    fire: 0.5,
    water: 0.5,
    electric: 2,
    grass: 2,
    ice: 0.5,
    fighting: 1,
    poison: 1,
    ground: 1,
    flying: 1,
    psychic: 1,
    bug: 1,
    rock: 1,
    ghost: 1,
    dragon: 1,
    dark: 1,
    steel: 0.5,
    fairy: 1,
  },
  electric: {
    normal: 1,
    fire: 1,
    water: 1,
    electric: 0.5,
    grass: 1,
    ice: 1,
    fighting: 1,
    poison: 1,
    ground: 2,
    flying: 0.5,
    psychic: 1,
    bug: 1,
    rock: 1,
    ghost: 1,
    dragon: 1,
    dark: 1,
    steel: 0.5,
    fairy: 1,
  },
  grass: {
    normal: 1,
    fire: 2,
    water: 0.5,
    electric: 0.5,
    grass: 0.5,
    ice: 2,
    fighting: 1,
    poison: 2,
    ground: 0.5,
    flying: 2,
    psychic: 1,
    bug: 2,
    rock: 1,
    ghost: 1,
    dragon: 1,
    dark: 1,
    steel: 1,
    fairy: 1,
  },
  ice: {
    normal: 1,
    fire: 2,
    water: 1,
    electric: 1,
    grass: 1,
    ice: 0.5,
    fighting: 2,
    poison: 1,
    ground: 1,
    flying: 1,
    psychic: 1,
    bug: 1,
    rock: 2,
    ghost: 1,
    dragon: 1,
    dark: 1,
    steel: 2,
    fairy: 1,
  },
  fighting: {
    normal: 1,
    fire: 1,
    water: 1,
    electric: 1,
    grass: 1,
    ice: 1,
    fighting: 1,
    poison: 1,
    ground: 1,
    flying: 2,
    psychic: 2,
    bug: 0.5,
    rock: 0.5,
    ghost: 1,
    dragon: 1,
    dark: 0.5,
    steel: 1,
    fairy: 2,
  },
  poison: {
    normal: 1,
    fire: 1,
    water: 1,
    electric: 1,
    grass: 0.5,
    ice: 1,
    fighting: 0.5,
    poison: 0.5,
    ground: 2,
    flying: 1,
    psychic: 2,
    bug: 0.5,
    rock: 1,
    ghost: 1,
    dragon: 1,
    dark: 1,
    steel: 1,
    fairy: 0.5,
  },
  ground: {
    normal: 1,
    fire: 1,
    water: 2,
    electric: 0,
    grass: 2,
    ice: 2,
    fighting: 1,
    poison: 0.5,
    ground: 1,
    flying: 1,
    psychic: 1,
    bug: 1,
    rock: 0.5,
    ghost: 1,
    dragon: 1,
    dark: 1,
    steel: 1,
    fairy: 1,
  },
  flying: {
    normal: 1,
    fire: 1,
    water: 1,
    electric: 2,
    grass: 0.5,
    ice: 2,
    fighting: 0.5,
    poison: 1,
    ground: 0,
    flying: 1,
    psychic: 1,
    bug: 0.5,
    rock: 2,
    ghost: 1,
    dragon: 1,
    dark: 1,
    steel: 1,
    fairy: 1,
  },
  psychic: {
    normal: 1,
    fire: 1,
    water: 1,
    electric: 1,
    grass: 1,
    ice: 1,
    fighting: 0.5,
    poison: 1,
    ground: 1,
    flying: 1,
    psychic: 0.5,
    bug: 2,
    rock: 1,
    ghost: 2,
    dragon: 1,
    dark: 2,
    steel: 1,
    fairy: 1,
  },
  bug: {
    normal: 1,
    fire: 2,
    water: 1,
    electric: 1,
    grass: 0.5,
    ice: 1,
    fighting: 0.5,
    poison: 1,
    ground: 0.5,
    flying: 2,
    psychic: 1,
    bug: 1,
    rock: 2,
    ghost: 1,
    dragon: 1,
    dark: 1,
    steel: 1,
    fairy: 1,
  },
  rock: {
    normal: 0.5,
    fire: 0.5,
    water: 2,
    electric: 1,
    grass: 2,
    ice: 1,
    fighting: 2,
    poison: 0.5,
    ground: 2,
    flying: 0.5,
    psychic: 1,
    bug: 1,
    rock: 1,
    ghost: 1,
    dragon: 1,
    dark: 1,
    steel: 2,
    fairy: 1,
  },
  ghost: {
    normal: 0,
    fire: 1,
    water: 1,
    electric: 1,
    grass: 1,
    ice: 1,
    fighting: 0,
    poison: 0.5,
    ground: 1,
    flying: 1,
    psychic: 1,
    bug: 0.5,
    rock: 1,
    ghost: 2,
    dragon: 1,
    dark: 2,
    steel: 1,
    fairy: 1,
  },
  dragon: {
    normal: 1,
    fire: 0.5,
    water: 0.5,
    electric: 0.5,
    grass: 0.5,
    ice: 2,
    fighting: 1,
    poison: 1,
    ground: 1,
    flying: 1,
    psychic: 1,
    bug: 1,
    rock: 1,
    ghost: 1,
    dragon: 2,
    dark: 1,
    steel: 1,
    fairy: 2,
  },
  dark: {
    normal: 1,
    fire: 1,
    water: 1,
    electric: 1,
    grass: 1,
    ice: 1,
    fighting: 2,
    poison: 1,
    ground: 1,
    flying: 1,
    psychic: 0,
    bug: 2,
    rock: 1,
    ghost: 0.5,
    dragon: 1,
    dark: 0.5,
    steel: 1,
    fairy: 2,
  },
  steel: {
    normal: 0.5,
    fire: 2,
    water: 1,
    electric: 1,
    grass: 0.5,
    ice: 0.5,
    fighting: 2,
    poison: 0,
    ground: 2,
    flying: 0.5,
    psychic: 0.5,
    bug: 0.5,
    rock: 0.5,
    ghost: 1,
    dragon: 0.5,
    dark: 1,
    steel: 0.5,
    fairy: 0.5,
  },
  fairy: {
    normal: 1,
    fire: 1,
    water: 1,
    electric: 1,
    grass: 1,
    ice: 1,
    fighting: 0.5,
    poison: 2,
    ground: 1,
    flying: 1,
    psychic: 1,
    bug: 0.5,
    rock: 1,
    ghost: 1,
    dragon: 0,
    dark: 0.5,
    steel: 2,
    fairy: 1,
  },
};

export function calculateTypeEffectiveness(types: string[], customTypes: CustomType[]) {
  const effectiveness: Record<PokemonType, number> = {} as Record<PokemonType, number>;

  // Initialize effectiveness for all types to 1
  POKEMON_TYPES.forEach((type) => {
    effectiveness[type as PokemonType] = 1;
  });

  // Calculate effectiveness for each attacking type against each defensive type
  types.forEach((defenseType) => {
    const customType = customTypes.find(t => t.name === defenseType);
    
    if (customType) {
      // Handle custom type effectiveness
      POKEMON_TYPES.forEach((attackType) => {
        if (customType.weaknesses.includes(attackType as PokemonType)) {
          effectiveness[attackType as PokemonType] *= 2;
        }
        if (customType.resistances.includes(attackType as PokemonType)) {
          effectiveness[attackType as PokemonType] *= 0.5;
        }
        if (customType.immunities.includes(attackType as PokemonType)) {
          effectiveness[attackType as PokemonType] = 0;
        }
      });
    } else if (POKEMON_TYPES.includes(defenseType as PokemonType)) {
      // Handle standard type effectiveness
      POKEMON_TYPES.forEach((attackType) => {
        effectiveness[attackType as PokemonType] *= TYPE_CHART[defenseType as PokemonType][attackType as PokemonType];
      });
    }
  });

  // Separate into weaknesses, resistances, and immunities
  const weaknesses: { type: PokemonType; multiplier: number }[] = [];
  const resistances: { type: PokemonType; multiplier: number }[] = [];
  const immunities: PokemonType[] = [];

  Object.entries(effectiveness).forEach(([type, multiplier]) => {
    if (multiplier === 0) {
      immunities.push(type as PokemonType);
    } else if (multiplier > 1) {
      weaknesses.push({ type: type as PokemonType, multiplier });
    } else if (multiplier < 1) {
      resistances.push({ type: type as PokemonType, multiplier });
    }
  });

  return {
    weaknesses: weaknesses.sort((a, b) => b.multiplier - a.multiplier),
    resistances: resistances.sort((a, b) => a.multiplier - b.multiplier),
    immunities: immunities.sort(),
  };
}
